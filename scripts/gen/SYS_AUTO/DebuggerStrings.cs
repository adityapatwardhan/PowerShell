//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;



/// <summary>
///   A strongly-typed resource class, for looking up localized strings, etc.
/// </summary>
// This class was auto-generated by the StronglyTypedResourceBuilder
// class via a tool like ResGen or Visual Studio.
// To add or remove a member, edit your .ResX file then rerun ResGen
// with the /str option, or rebuild your VS project.
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
internal class DebuggerStrings {
    
    private static global::System.Resources.ResourceManager resourceMan;
    
    private static global::System.Globalization.CultureInfo resourceCulture;
    
    [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
    internal DebuggerStrings() {
    }
    
    /// <summary>
    ///   Returns the cached ResourceManager instance used by this class.
    /// </summary>
    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    internal static global::System.Resources.ResourceManager ResourceManager {
        get {
            if (object.ReferenceEquals(resourceMan, null)) {
                global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DebuggerStrings", typeof(DebuggerStrings).GetTypeInfo().Assembly);
                resourceMan = temp;
            }
            return resourceMan;
        }
    }
    
    /// <summary>
    ///   Overrides the current thread's CurrentUICulture property for all
    ///   resource lookups using this strongly typed resource class.
    /// </summary>
    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    internal static global::System.Globalization.CultureInfo Culture {
        get {
            return resourceCulture;
        }
        set {
            resourceCulture = value;
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to                      Use &quot;list&quot; to start from the current line, &quot;list &lt;m&gt;&quot;  .
    /// </summary>
    internal static string AdditionalListHelp1 {
        get {
            return ResourceManager.GetString("AdditionalListHelp1", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to                      to start from line &lt;m&gt;, and &quot;list &lt;m&gt; &lt;n&gt;&quot; to list &lt;n&gt; .
    /// </summary>
    internal static string AdditionalListHelp2 {
        get {
            return ResourceManager.GetString("AdditionalListHelp2", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to                      lines starting from line &lt;m&gt;.
    /// </summary>
    internal static string AdditionalListHelp3 {
        get {
            return ResourceManager.GetString("AdditionalListHelp3", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The line count must be a positive integer..
    /// </summary>
    internal static string BadCountFormat {
        get {
            return ResourceManager.GetString("BadCountFormat", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The starting line must be a positive integer no greater than {0}.
    /// </summary>
    internal static string BadStartFormat {
        get {
            return ResourceManager.GetString("BadStartFormat", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The debugger cannot be enabled for step mode because the debugger is turned off with debug mode set to None..
    /// </summary>
    internal static string CannotEnableDebuggerSteppingInvalidMode {
        get {
            return ResourceManager.GetString("CannotEnableDebuggerSteppingInvalidMode", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The debugger cannot process commands unless it is in the Stopped state..
    /// </summary>
    internal static string CannotProcessDebuggerCommandNotStopped {
        get {
            return ResourceManager.GetString("CannotProcessDebuggerCommandNotStopped", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to SetDebugAction is not implemented for the local script debugger..
    /// </summary>
    internal static string CannotSetDebuggerAction {
        get {
            return ResourceManager.GetString("CannotSetDebuggerAction", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The debugger cannot set a resume action because the debugger in the remote session is not in a Stopped state..
    /// </summary>
    internal static string CannotSetRemoteDebuggerAction {
        get {
            return ResourceManager.GetString("CannotSetRemoteDebuggerAction", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The job cannot be debugged because the debugger is currently busy..
    /// </summary>
    internal static string CannotStartJobDebuggingDebuggerBusy {
        get {
            return ResourceManager.GetString("CannotStartJobDebuggingDebuggerBusy", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Command breakpoint on &apos;{0}&apos;.
    /// </summary>
    internal static string CommandBreakpointString {
        get {
            return ResourceManager.GetString("CommandBreakpointString", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Command breakpoint on &apos;{0}:{1}&apos;.
    /// </summary>
    internal static string CommandScriptBreakpointString {
        get {
            return ResourceManager.GetString("CommandScriptBreakpointString", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to  {0}, {1,-16} Continue operation.
    /// </summary>
    internal static string ContinueHelp {
        get {
            return ResourceManager.GetString("ContinueHelp", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to  {0}, {1,-16} Continue operation and detach the debugger..
    /// </summary>
    internal static string DetachHelp {
        get {
            return ResourceManager.GetString("DetachHelp", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to  &lt;enter&gt;             Repeat last command if it was {0}, {1} or {2}.
    /// </summary>
    internal static string EnterHelp {
        get {
            return ResourceManager.GetString("EnterHelp", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to  {0}, Get-PSCallStack  Display call stack.
    /// </summary>
    internal static string GetStackTraceHelp {
        get {
            return ResourceManager.GetString("GetStackTraceHelp", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to  {0}, {1,-16} displays this help message..
    /// </summary>
    internal static string HelpCommandHelp {
        get {
            return ResourceManager.GetString("HelpCommandHelp", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The debugger detach command is not applicable.  The detach command only applies when debugging jobs and runspaces with the Debug-Job or Debug-Runspace cmdlets..
    /// </summary>
    internal static string InvalidDetachCommand {
        get {
            return ResourceManager.GetString("InvalidDetachCommand", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Line breakpoint on &apos;{0}:{1}&apos;.
    /// </summary>
    internal static string LineBreakpointString {
        get {
            return ResourceManager.GetString("LineBreakpointString", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to  {0}, {1,-16} List source code for the current script.  .
    /// </summary>
    internal static string ListHelp {
        get {
            return ResourceManager.GetString("ListHelp", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to {0}: line {1}.
    /// </summary>
    internal static string LocationFormat {
        get {
            return ResourceManager.GetString("LocationFormat", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Process.
    /// </summary>
    internal static string NestedRunspaceDebuggerPromptProcessName {
        get {
            return ResourceManager.GetString("NestedRunspaceDebuggerPromptProcessName", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The provided job and all child jobs were examined but no jobs were found that could be debugged.  In order to debug a job or child job the job must support debugging and also be in a running state..
    /// </summary>
    internal static string NoDebuggableJobsFound {
        get {
            return ResourceManager.GetString("NoDebuggableJobsFound", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to &lt;No file&gt;.
    /// </summary>
    internal static string NoFile {
        get {
            return ResourceManager.GetString("NoFile", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to There is no source code available..
    /// </summary>
    internal static string NoSourceCode {
        get {
            return ResourceManager.GetString("NoSourceCode", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to For instructions about how to customize your debugger prompt, type &quot;help about_prompt&quot;..
    /// </summary>
    internal static string PromptHelp {
        get {
            return ResourceManager.GetString("PromptHelp", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The debugger is already overridden..
    /// </summary>
    internal static string RemoteServerDebuggerAlreadyPushed {
        get {
            return ResourceManager.GetString("RemoteServerDebuggerAlreadyPushed", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot push a debugger object onto itself..
    /// </summary>
    internal static string RemoteServerDebuggerCannotPushSelf {
        get {
            return ResourceManager.GetString("RemoteServerDebuggerCannotPushSelf", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The Runspace cannot be debugged because the host debugger is currently busy..
    /// </summary>
    internal static string RunspaceDebuggingDebuggerBusy {
        get {
            return ResourceManager.GetString("RunspaceDebuggingDebuggerBusy", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot debug Runspace. The Runspace debugger is currently turned off (DebugMode is &apos;None&apos;)..
    /// </summary>
    internal static string RunspaceDebuggingDebuggerIsOff {
        get {
            return ResourceManager.GetString("RunspaceDebuggingDebuggerIsOff", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot debug a Runspace that is not in the Opened state. This Runspace state is {0}..
    /// </summary>
    internal static string RunspaceDebuggingInvalidRunspaceState {
        get {
            return ResourceManager.GetString("RunspaceDebuggingInvalidRunspaceState", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot debug Runspace. The Runspace {0} has no associated debugger..
    /// </summary>
    internal static string RunspaceDebuggingNoRunspaceDebugger {
        get {
            return ResourceManager.GetString("RunspaceDebuggingNoRunspaceDebugger", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to 
    ///The current session does not support debugging; operation will continue.
    ///
    ///.
    /// </summary>
    internal static string SessionDoesNotSupportDebugger {
        get {
            return ResourceManager.GetString("SessionDoesNotSupportDebugger", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to at {0}, {1}: line {2}.
    /// </summary>
    internal static string StackTraceFormat {
        get {
            return ResourceManager.GetString("StackTraceFormat", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Line breakpoint on &apos;{0}:{1}, {2}&apos;.
    /// </summary>
    internal static string StatementBreakpointString {
        get {
            return ResourceManager.GetString("StatementBreakpointString", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to  {0}, {1,-16} Single step (step into functions, scripts, etc.).
    /// </summary>
    internal static string StepHelp {
        get {
            return ResourceManager.GetString("StepHelp", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to  {0}, {1,-16} Step out of the current function, script, etc..
    /// </summary>
    internal static string StepOutHelp {
        get {
            return ResourceManager.GetString("StepOutHelp", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to  {0}, {1,-16} Step to next statement (step over functions, scripts, etc.).
    /// </summary>
    internal static string StepOverHelp {
        get {
            return ResourceManager.GetString("StepOverHelp", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to  {0}, {1,-16} Stop operation and exit the debugger.
    /// </summary>
    internal static string StopHelp {
        get {
            return ResourceManager.GetString("StopHelp", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Variable breakpoint on &apos;${0}&apos; ({1} access).
    /// </summary>
    internal static string VariableBreakpointString {
        get {
            return ResourceManager.GetString("VariableBreakpointString", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Variable breakpoint on &apos;{0}:${1}&apos; ({2} access).
    /// </summary>
    internal static string VariableScriptBreakpointString {
        get {
            return ResourceManager.GetString("VariableScriptBreakpointString", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Breakpoint {0} will not be hit.
    /// </summary>
    internal static string WarningBreakpointWillNotBeHit {
        get {
            return ResourceManager.GetString("WarningBreakpointWillNotBeHit", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Workflow debugging is available, but is not supported by the current host. Use the Windows PowerShell console or Windows PowerShell ISE to debug workflows..
    /// </summary>
    internal static string WorkflowDebuggingNotSupported {
        get {
            return ResourceManager.GetString("WorkflowDebuggingNotSupported", resourceCulture);
        }
    }
}
