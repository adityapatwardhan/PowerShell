//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;



/// <summary>
///   A strongly-typed resource class, for looking up localized strings, etc.
/// </summary>
// This class was auto-generated by the StronglyTypedResourceBuilder
// class via a tool like ResGen or Visual Studio.
// To add or remove a member, edit your .ResX file then rerun ResGen
// with the /str option, or rebuild your VS project.
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
internal class SecuritySupportStrings {
    
    private static global::System.Resources.ResourceManager resourceMan;
    
    private static global::System.Globalization.CultureInfo resourceCulture;
    
    [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
    internal SecuritySupportStrings() {
    }
    
    /// <summary>
    ///   Returns the cached ResourceManager instance used by this class.
    /// </summary>
    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    internal static global::System.Resources.ResourceManager ResourceManager {
        get {
            if (object.ReferenceEquals(resourceMan, null)) {
                global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SecuritySupportStrings", typeof(SecuritySupportStrings).GetTypeInfo().Assembly);
                resourceMan = temp;
            }
            return resourceMan;
        }
    }
    
    /// <summary>
    ///   Overrides the current thread's CurrentUICulture property for all
    ///   resource lookups using this strongly typed resource class.
    /// </summary>
    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    internal static global::System.Globalization.CultureInfo Culture {
        get {
            return resourceCulture;
        }
        set {
            resourceCulture = value;
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Certificate &apos;{0}&apos; cannot be used for encryption. Encryption certificates must contain the Data Encipherment or Key Encipherment key usage, and include the Document Encryption Enhanced Key Usage ({1})..
    /// </summary>
    internal static string CertificateCannotBeUsedForEncryption {
        get {
            return ResourceManager.GetString("CertificateCannotBeUsedForEncryption", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to WARNING: The certificate &apos;{0}&apos; contains a private key. Protected Event Logging certificates used for encryption should only contain the public key..
    /// </summary>
    internal static string CertificateContainsPrivateKey {
        get {
            return ResourceManager.GetString("CertificateContainsPrivateKey", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot load certificate. &apos;{0}&apos; must resolve to a file system path..
    /// </summary>
    internal static string CertificatePathMustBeFileSystemPath {
        get {
            return ResourceManager.GetString("CertificatePathMustBeFileSystemPath", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to ERROR: Could not protect event log message &apos;{0}&apos;: {1}.
    /// </summary>
    internal static string CouldNotEncryptContent {
        get {
            return ResourceManager.GetString("CouldNotEncryptContent", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to ERROR: Could not find or use certificate: {0}.
    /// </summary>
    internal static string CouldNotUseCertificate {
        get {
            return ResourceManager.GetString("CouldNotUseCertificate", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot load certificate. The identifier &apos;{0}&apos; matches multiple certificates. To encrypt to multiple recipients, provide multiple specific values to the &apos;{1}&apos; parameter, rather than a wildcard that matches multiple certificates..
    /// </summary>
    internal static string IdentifierMustReferenceSingleCertificate {
        get {
            return ResourceManager.GetString("IdentifierMustReferenceSingleCertificate", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot load encryption certificate. The certificate setting &apos;{0}&apos; does not represent a valid base-64 encoded certificate, nor does it represent a valid certificate by file, directory, thumbprint, or subject name..
    /// </summary>
    internal static string NoCertificateFound {
        get {
            return ResourceManager.GetString("NoCertificateFound", resourceCulture);
        }
    }
}
