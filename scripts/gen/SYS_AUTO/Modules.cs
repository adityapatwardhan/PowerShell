//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;



/// <summary>
///   A strongly-typed resource class, for looking up localized strings, etc.
/// </summary>
// This class was auto-generated by the StronglyTypedResourceBuilder
// class via a tool like ResGen or Visual Studio.
// To add or remove a member, edit your .ResX file then rerun ResGen
// with the /str option, or rebuild your VS project.
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
internal class Modules {
    
    private static global::System.Resources.ResourceManager resourceMan;
    
    private static global::System.Globalization.CultureInfo resourceCulture;
    
    [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
    internal Modules() {
    }
    
    /// <summary>
    ///   Returns the cached ResourceManager instance used by this class.
    /// </summary>
    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    internal static global::System.Resources.ResourceManager ResourceManager {
        get {
            if (object.ReferenceEquals(resourceMan, null)) {
                global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Modules", typeof(Modules).GetTypeInfo().Assembly);
                resourceMan = temp;
            }
            return resourceMan;
        }
    }
    
    /// <summary>
    ///   Overrides the current thread's CurrentUICulture property for all
    ///   resource lookups using this strongly typed resource class.
    /// </summary>
    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    internal static global::System.Globalization.CultureInfo Culture {
        get {
            return resourceCulture;
        }
        set {
            resourceCulture = value;
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Aliases to export from this module.
    /// </summary>
    internal static string AliasesToExport {
        get {
            return ResourceManager.GetString("AliasesToExport", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Author of this module.
    /// </summary>
    internal static string Author {
        get {
            return ResourceManager.GetString("Author", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot define the workflow. The language mode for this session is incompatible with the system-wide language mode..
    /// </summary>
    internal static string CannotDefineWorkflowInconsistentLanguageMode {
        get {
            return ResourceManager.GetString("CannotDefineWorkflowInconsistentLanguageMode", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot verify the Microsoft .NET Framework version {0} because it is not included in the list of permitted versions..
    /// </summary>
    internal static string CannotDetectNetFrameworkVersion {
        get {
            return ResourceManager.GetString("CannotDetectNetFrameworkVersion", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The Export-ModuleMember cmdlet can only be called from inside a module..
    /// </summary>
    internal static string CanOnlyBeUsedFromWithinAModule {
        get {
            return ResourceManager.GetString("CanOnlyBeUsedFromWithinAModule", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to No custom object was returned for module &apos;{0}&apos; because the -AsCustomObject parameter can only be used with script modules..
    /// </summary>
    internal static string CantUseAsCustomObjectWithBinaryModule {
        get {
            return ResourceManager.GetString("CantUseAsCustomObjectWithBinaryModule", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Minimum version of the common language runtime (CLR) required by this module.
    /// </summary>
    internal static string CLRVersion {
        get {
            return ResourceManager.GetString("CLRVersion", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The value of the {0} key in {1} is {2} and the module has nested modules. When a CDXML file is the root module, the Import-Module command fails because the commands in nested modules cannot be exported. Move the CDXML file to the NestedModules key and try the command again..
    /// </summary>
    internal static string CmdletizationDoesSupportRexportingNestedModules {
        get {
            return ResourceManager.GetString("CmdletizationDoesSupportRexportingNestedModules", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cmdlets to export from this module.
    /// </summary>
    internal static string CmdletsToExport {
        get {
            return ResourceManager.GetString("CmdletsToExport", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Company or vendor of this module.
    /// </summary>
    internal static string CompanyName {
        get {
            return ResourceManager.GetString("CompanyName", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to {0} (Path: &apos;{1}&apos;).
    /// </summary>
    internal static string ConfirmRemoveModule {
        get {
            return ResourceManager.GetString("ConfirmRemoveModule", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Copyright statement for this module.
    /// </summary>
    internal static string Copyright {
        get {
            return ResourceManager.GetString("Copyright", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The module &apos;{0}&apos; is a core module for Windows PowerShell. Add the Force parameter to your command to remove core modules..
    /// </summary>
    internal static string CoreModuleCannotBeRemoved {
        get {
            return ResourceManager.GetString("CoreModuleCannotBeRemoved", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Creating the &quot;{0}&quot; module manifest file..
    /// </summary>
    internal static string CreatingModuleManifestFile {
        get {
            return ResourceManager.GetString("CreatingModuleManifestFile", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Default prefix for commands exported from this module. Override the default prefix using Import-Module -Prefix..
    /// </summary>
    internal static string DefaultCommandPrefix {
        get {
            return ResourceManager.GetString("DefaultCommandPrefix", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Unknown.
    /// </summary>
    internal static string DefaultCompanyName {
        get {
            return ResourceManager.GetString("DefaultCompanyName", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to (c) {0} {1}. All rights reserved..
    /// </summary>
    internal static string DefaultCopyrightMessage {
        get {
            return ResourceManager.GetString("DefaultCopyrightMessage", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Description of the functionality provided by this module.
    /// </summary>
    internal static string Description {
        get {
            return ResourceManager.GetString("Description", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Searching for available modules.
    /// </summary>
    internal static string DeterminingAvailableModules {
        get {
            return ResourceManager.GetString("DeterminingAvailableModules", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Minimum version of Microsoft .NET Framework required by this module.
    /// </summary>
    internal static string DotNetFrameworkVersion {
        get {
            return ResourceManager.GetString("DotNetFrameworkVersion", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Dot-sourcing the script file &apos;{0}&apos;..
    /// </summary>
    internal static string DottingScriptFile {
        get {
            return ResourceManager.GetString("DottingScriptFile", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to DSC resources to export from this module.
    /// </summary>
    internal static string DscResourcesToExport {
        get {
            return ResourceManager.GetString("DscResourcesToExport", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Processing the module manifest file &apos;{0}&apos; did not result in a valid manifest object. Update the file to contain a valid Windows PowerShell module manifest. A valid manifest can be created using the New-ModuleManifest cmdlet..
    /// </summary>
    internal static string EmptyModuleManifest {
        get {
            return ResourceManager.GetString("EmptyModuleManifest", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to End of {0} hashtable.
    /// </summary>
    internal static string EndOfManifestHashTable {
        get {
            return ResourceManager.GetString("EndOfManifestHashTable", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The command cannot be exported as workflow &apos;{0}&apos;..
    /// </summary>
    internal static string ExportAsWorkflowInvalidCommand {
        get {
            return ResourceManager.GetString("ExportAsWorkflowInvalidCommand", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Exporting alias &apos;{0}&apos;..
    /// </summary>
    internal static string ExportingAlias {
        get {
            return ResourceManager.GetString("ExportingAlias", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Exporting cmdlet &apos;{0}&apos;..
    /// </summary>
    internal static string ExportingCmdlet {
        get {
            return ResourceManager.GetString("ExportingCmdlet", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Exporting command as workflow &apos;{0}&apos;..
    /// </summary>
    internal static string ExportingCommandAsWorkflow {
        get {
            return ResourceManager.GetString("ExportingCommandAsWorkflow", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Exporting function &apos;{0}&apos;..
    /// </summary>
    internal static string ExportingFunction {
        get {
            return ResourceManager.GetString("ExportingFunction", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Exporting variable &apos;{0}&apos;..
    /// </summary>
    internal static string ExportingVariable {
        get {
            return ResourceManager.GetString("ExportingVariable", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Exporting workflow &apos;{0}&apos;..
    /// </summary>
    internal static string ExportingWorkflow {
        get {
            return ResourceManager.GetString("ExportingWorkflow", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to List of all files packaged with this module.
    /// </summary>
    internal static string FileList {
        get {
            return ResourceManager.GetString("FileList", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The specified format data file &apos;{0}&apos; could not be processed because the file was not found. Verify that you have provided the correct path name for the format data file, and then try again..
    /// </summary>
    internal static string FormatsFileNotFound {
        get {
            return ResourceManager.GetString("FormatsFileNotFound", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Format files (.ps1xml) to be loaded when importing this module.
    /// </summary>
    internal static string FormatsToProcess {
        get {
            return ResourceManager.GetString("FormatsToProcess", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Functions to export from this module.
    /// </summary>
    internal static string FunctionsToExport {
        get {
            return ResourceManager.GetString("FunctionsToExport", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The &apos;Global&apos; and &apos;Scope&apos; parameters cannot be specified together. Remove one of these parameters, and then try running the command again..
    /// </summary>
    internal static string GlobalAndScopeParameterCannotBeSpecifiedTogether {
        get {
            return ResourceManager.GetString("GlobalAndScopeParameterCannotBeSpecifiedTogether", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to ID used to uniquely identify this module.
    /// </summary>
    internal static string GUID {
        get {
            return ResourceManager.GetString("GUID", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to HelpInfo URI of this module.
    /// </summary>
    internal static string HelpInfoURI {
        get {
            return ResourceManager.GetString("HelpInfoURI", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to A URL to an icon representing this module..
    /// </summary>
    internal static string IconUri {
        get {
            return ResourceManager.GetString("IconUri", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Importing alias &apos;{0}&apos;..
    /// </summary>
    internal static string ImportingAlias {
        get {
            return ResourceManager.GetString("ImportingAlias", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Importing cmdlet &apos;{0}&apos;..
    /// </summary>
    internal static string ImportingCmdlet {
        get {
            return ResourceManager.GetString("ImportingCmdlet", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Importing function &apos;{0}&apos;..
    /// </summary>
    internal static string ImportingFunction {
        get {
            return ResourceManager.GetString("ImportingFunction", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Some imported command names contain one or more of the following restricted characters: # , ( ) {{ }} [ ] &amp; - / \ $ ^ ; : &quot; &apos; &lt; &gt; | ? @ ` * % + = ~.
    /// </summary>
    internal static string ImportingNonStandardNoun {
        get {
            return ResourceManager.GetString("ImportingNonStandardNoun", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The command name &apos;{0}&apos; from the module &apos;{1}&apos; contains one or more of the following restricted characters: # , ( ) {{ }} [ ] &amp; - / \ $ ^ ; : &quot; &apos; &lt; &gt; | ? @ ` * % + = ~.
    /// </summary>
    internal static string ImportingNonStandardNounVerbose {
        get {
            return ResourceManager.GetString("ImportingNonStandardNounVerbose", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The names of some imported commands from the module &apos;{0}&apos; include unapproved verbs that might make them less discoverable. To find the commands with unapproved verbs, run the Import-Module command again with the Verbose parameter. For a list of approved verbs, type Get-Verb..
    /// </summary>
    internal static string ImportingNonStandardVerb {
        get {
            return ResourceManager.GetString("ImportingNonStandardVerb", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The &apos;{0}&apos; command in the {1}&apos; module was imported, but because its name does not include an approved verb, it might be difficult to find. For a list of approved verbs, type Get-Verb..
    /// </summary>
    internal static string ImportingNonStandardVerbVerbose {
        get {
            return ResourceManager.GetString("ImportingNonStandardVerbVerbose", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The &apos;{0}&apos; command in the {2}&apos; module was imported, but because its name does not include an approved verb, it might be difficult to find. The suggested alternative verbs are &quot;{1}&quot;..
    /// </summary>
    internal static string ImportingNonStandardVerbVerboseSuggestion {
        get {
            return ResourceManager.GetString("ImportingNonStandardVerbVerboseSuggestion", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Importing variable &apos;{0}&apos;..
    /// </summary>
    internal static string ImportingVariable {
        get {
            return ResourceManager.GetString("ImportingVariable", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Importing command as workflow &apos;{0}&apos;..
    /// </summary>
    internal static string ImportingWorkflow {
        get {
            return ResourceManager.GetString("ImportingWorkflow", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The alias &apos;{0}&apos; was not imported because there is a member with the same name in the current scope..
    /// </summary>
    internal static string ImportModuleNoClobberForAlias {
        get {
            return ResourceManager.GetString("ImportModuleNoClobberForAlias", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The cmdlet &apos;{0}&apos; was not imported because there is a member with the same name in the current scope..
    /// </summary>
    internal static string ImportModuleNoClobberForCmdlet {
        get {
            return ResourceManager.GetString("ImportModuleNoClobberForCmdlet", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The function &apos;{0}&apos; was not imported because there is a member with the same name in the current scope..
    /// </summary>
    internal static string ImportModuleNoClobberForFunction {
        get {
            return ResourceManager.GetString("ImportModuleNoClobberForFunction", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The variable &apos;{0}&apos; was not imported because there is a member with the same name in the current scope..
    /// </summary>
    internal static string ImportModuleNoClobberForVariable {
        get {
            return ResourceManager.GetString("ImportModuleNoClobberForVariable", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The command &apos;{0}&apos; was not imported as a workflow because there is a member with the same name in the current scope..
    /// </summary>
    internal static string ImportModuleNoClobberForWorkflow {
        get {
            return ResourceManager.GetString("ImportModuleNoClobberForWorkflow", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The item {0} that resolves to {1} is not located in the same directory as the module manifest or any of its subdirectories. Windows PowerShell looks for items referenced in the manifest only in paths relative to the manifest location. To fix this problem, move the item, and use a relative path to identify its location..
    /// </summary>
    internal static string IncludedItemPathFallsOutsideSaveTree {
        get {
            return ResourceManager.GetString("IncludedItemPathFallsOutsideSaveTree", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The module &apos;{0}&apos; requires the following version of the .NET Framework: {1}.  The required version is not installed..
    /// </summary>
    internal static string InvalidDotNetFrameworkVersion {
        get {
            return ResourceManager.GetString("InvalidDotNetFrameworkVersion", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The extension &apos;{0}&apos; is not a valid module extension. The supported module extensions are &apos;.dll&apos;, &apos;.ps1&apos;, &apos;.psm1&apos;, &apos;.psd1&apos;, &apos;.cdxml&apos; and &apos;.xaml&apos;. Correct the extension then try adding the file &apos;{1}&apos; again..
    /// </summary>
    internal static string InvalidModuleExtension {
        get {
            return ResourceManager.GetString("InvalidModuleExtension", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The module manifest &apos;{0}&apos; could not be processed because it is not a valid Windows PowerShell restricted language file. Remove the elements that are not permitted by the restricted language:
    ///{1}.
    /// </summary>
    internal static string InvalidModuleManifest {
        get {
            return ResourceManager.GetString("InvalidModuleManifest", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The &apos;{0}&apos; module cannot be imported because its manifest contains one or more members that are not valid. The valid manifest members are ({1}). Remove the members that are not valid ({2}), then try to import the module again..
    /// </summary>
    internal static string InvalidModuleManifestMember {
        get {
            return ResourceManager.GetString("InvalidModuleManifestMember", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The module manifest path &apos;{0}&apos; is not valid. The value of the Path argument must resolve to a single file that has a &apos;.psd1&apos; extension. Change the value of the Path argument to point to a valid psd1 file, and then try again..
    /// </summary>
    internal static string InvalidModuleManifestPath {
        get {
            return ResourceManager.GetString("InvalidModuleManifestPath", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The ModuleVersion key in module manifest &apos;{0}&apos; specifies module version &apos;{1}&apos; which does not match its version folder name at &apos;{2}&apos;. Change the value of the ModuleVersion key to match the version folder name..
    /// </summary>
    internal static string InvalidModuleManifestVersion {
        get {
            return ResourceManager.GetString("InvalidModuleManifestVersion", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The hashtable describing a module contains one or more members that are not valid.  The valid members are ({0}). Remove the members that are not valid ({1}), then try again..
    /// </summary>
    internal static string InvalidModuleSpecificationMember {
        get {
            return ResourceManager.GetString("InvalidModuleSpecificationMember", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to This operation cannot be performed on a binary module. It can only be performed on a script module..
    /// </summary>
    internal static string InvalidOperationOnBinaryModule {
        get {
            return ResourceManager.GetString("InvalidOperationOnBinaryModule", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The specified value &apos;{0}&apos; is invalid, try again with a valid value..
    /// </summary>
    internal static string InvalidParameterValue {
        get {
            return ResourceManager.GetString("InvalidParameterValue", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The name of the current Windows PowerShell host is: &apos;{0}&apos;. The module &apos;{1}&apos; requires the following Windows PowerShell host: &apos;{2}&apos;..
    /// </summary>
    internal static string InvalidPowerShellHostName {
        get {
            return ResourceManager.GetString("InvalidPowerShellHostName", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The current Windows PowerShell host is: &apos;{0}&apos; (version {1}). The module &apos;{2}&apos; requires a minimum Windows PowerShell host version of &apos;{3}&apos; to run..
    /// </summary>
    internal static string InvalidPowerShellHostVersion {
        get {
            return ResourceManager.GetString("InvalidPowerShellHostVersion", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The current processor architecture is: {0}.  The module &apos;{1}&apos; requires the following architecture: {2}..
    /// </summary>
    internal static string InvalidProcessorArchitecture {
        get {
            return ResourceManager.GetString("InvalidProcessorArchitecture", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The processor architecture value of {0} is not supported. Run the New-ModuleManifest command again, specifying one of the following supported enumeration values for processor architecture: None, MSIL, X86, Amd64, Arm.
    /// </summary>
    internal static string InvalidProcessorArchitectureInManifest {
        get {
            return ResourceManager.GetString("InvalidProcessorArchitectureInManifest", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The workflow file name is not valid because it does not have the required .XAML file name extension. Run the New-ModuleManifest command again specifying a value for the WorkflowsToProcess parameter with this extension..
    /// </summary>
    internal static string InvalidWorkflowExtension {
        get {
            return ResourceManager.GetString("InvalidWorkflowExtension", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The workflow file name extension is not valid. The workflow file name {0} that is listed in the WorkflowsToProcess key of the module manifest does not have the required .XAML or .DLL file name extension. Edit the module manifest and correct the workflow file name. If you are using a .DLL file extension, then provide only one assembly name..
    /// </summary>
    internal static string InvalidWorkflowExtensionDuringManifestProcessing {
        get {
            return ResourceManager.GetString("InvalidWorkflowExtensionDuringManifestProcessing", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to A URL to the license for this module..
    /// </summary>
    internal static string LicenseUri {
        get {
            return ResourceManager.GetString("LicenseUri", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Loading &apos;{0}&apos; from path &apos;{1}&apos;..
    /// </summary>
    internal static string LoadingFile {
        get {
            return ResourceManager.GetString("LoadingFile", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Loading module from path &apos;{0}&apos;..
    /// </summary>
    internal static string LoadingModule {
        get {
            return ResourceManager.GetString("LoadingModule", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Loading workflow {0}.
    /// </summary>
    internal static string LoadingWorkflow {
        get {
            return ResourceManager.GetString("LoadingWorkflow", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Module manifest for module &apos;{0}&apos;.
    /// </summary>
    internal static string ManifestHeaderLine1 {
        get {
            return ResourceManager.GetString("ManifestHeaderLine1", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Generated by: {0}.
    /// </summary>
    internal static string ManifestHeaderLine2 {
        get {
            return ResourceManager.GetString("ManifestHeaderLine2", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Generated on: {0}.
    /// </summary>
    internal static string ManifestHeaderLine3 {
        get {
            return ResourceManager.GetString("ManifestHeaderLine3", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The module to process &apos;{0}&apos;, listed in field &apos;{1}&apos; of module manifest &apos;{2}&apos; was not processed because no valid module was found in any module directory..
    /// </summary>
    internal static string ManifestMemberNotFound {
        get {
            return ResourceManager.GetString("ManifestMemberNotFound", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The specified MaximumVersion &apos;{0}&apos; was incorrect. If you are using &apos;*&apos;, MaximumVersion only supports one &apos;*&apos; and should always be placed at the end of MaximumVersion..
    /// </summary>
    internal static string MaximumVersionFormatIncorrect {
        get {
            return ResourceManager.GetString("MaximumVersionFormatIncorrect", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The specified module &apos;{0}&apos; with MaximumVersion &apos;{1}&apos; was not loaded because no valid module file was found in any module directory..
    /// </summary>
    internal static string MaximumVersionNotFound {
        get {
            return ResourceManager.GetString("MaximumVersionNotFound", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The MinimumVersion &apos;{0}&apos; should not be greater than MaximumVersion &apos;{1}&apos;..
    /// </summary>
    internal static string MinimumVersionAndMaximumVersionInvalidRange {
        get {
            return ResourceManager.GetString("MinimumVersionAndMaximumVersionInvalidRange", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The specified module &apos;{0}&apos; with MinimumVersion &apos;{1}&apos; and MaximumVersion &apos;{2}&apos; was not loaded because no valid module file was found in any module directory..
    /// </summary>
    internal static string MinimumVersionAndMaximumVersionNotFound {
        get {
            return ResourceManager.GetString("MinimumVersionAndMaximumVersionNotFound", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Some commands from module {0} cannot be imported over a CimSession.  To get all the commands, verify that the remote server has Windows PowerShell remote management enabled, and then try adding the PSSession parameter to an Import-Module cmdlet..
    /// </summary>
    internal static string MixedModuleOverCimSessionWarning {
        get {
            return ResourceManager.GetString("MixedModuleOverCimSessionWarning", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The assembly &apos;{0}&apos; was not loaded because no assembly with that name was found. Verify the assembly name, and then try again..
    /// </summary>
    internal static string ModuleAssemblyFound {
        get {
            return ResourceManager.GetString("ModuleAssemblyFound", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Running the Get-Module cmdlet without ListAvailable parameter is not supported for module names that include a path. Name parameter has this element &apos;{0}&apos; which resolves to a path. Update the Name parameter to not have path elements, and then try again..
    /// </summary>
    internal static string ModuleDiscoveryForLoadedModulesWorksOnlyForUnQualifiedNames {
        get {
            return ResourceManager.GetString("ModuleDiscoveryForLoadedModulesWorksOnlyForUnQualifiedNames", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Because the {0} module is providing the PSDrive in the current Windows PowerShell session, no modules were removed. Change the current PSDrive provider, and then try removing modules again..
    /// </summary>
    internal static string ModuleDriveInUse {
        get {
            return ResourceManager.GetString("ModuleDriveInUse", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Unable to remove the module &apos;{0}&apos; because it is marked as &apos;constant.&apos; A module cannot be removed if it is marked &apos;constant.&apos;.
    /// </summary>
    internal static string ModuleIsConstant {
        get {
            return ResourceManager.GetString("ModuleIsConstant", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Unable to remove the module &apos;{0}&apos; because it is read-only. Add the Force parameter to your command to remove read-only modules..
    /// </summary>
    internal static string ModuleIsReadOnly {
        get {
            return ResourceManager.GetString("ModuleIsReadOnly", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Unable to remove the module &apos;{0}&apos; because it is required by &apos;{1}&apos;. Add the Force parameter to your command to remove the module..
    /// </summary>
    internal static string ModuleIsRequired {
        get {
            return ResourceManager.GetString("ModuleIsRequired", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to List of all modules packaged with this module.
    /// </summary>
    internal static string ModuleList {
        get {
            return ResourceManager.GetString("ModuleList", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The &apos;{0}&apos; module was not imported because the &apos;{0}&apos; snap-in was already imported..
    /// </summary>
    internal static string ModuleLoadedAsASnapin {
        get {
            return ResourceManager.GetString("ModuleLoadedAsASnapin", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The module manifest cannot contain both the &apos;ModuleToProcess&apos; and &apos;RootModule&apos; members. Change the module manifest file to remove one of these members at &apos;{0}&apos;, and then try again..
    /// </summary>
    internal static string ModuleManifestCannotContainBothModuleToProcessAndRootModule {
        get {
            return ResourceManager.GetString("ModuleManifestCannotContainBothModuleToProcessAndRootModule", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The version of the Common Language Runtime (CLR) on this computer is &apos;{0}&apos;. The module &apos;{1}&apos; requires a minimum CLR version of &apos;{2}&apos; to run. Verify that you are running the minimum required version of CLR, and then try again..
    /// </summary>
    internal static string ModuleManifestInsufficientCLRVersion {
        get {
            return ResourceManager.GetString("ModuleManifestInsufficientCLRVersion", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The version &apos;{0}&apos; of module &apos;{1}&apos; does not meet the required minimum version &apos;{2}&apos;. Verify that the version number is supported, and then try loading the module again..
    /// </summary>
    internal static string ModuleManifestInsufficientModuleVersion {
        get {
            return ResourceManager.GetString("ModuleManifestInsufficientModuleVersion", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The version of Windows PowerShell on this computer is &apos;{0}&apos;. The module &apos;{1}&apos; requires a minimum Windows PowerShell version of &apos;{2}&apos; to run. Verify that you have the minimum required version of Windows PowerShell installed, and then try again..
    /// </summary>
    internal static string ModuleManifestInsufficientPowerShellVersion {
        get {
            return ResourceManager.GetString("ModuleManifestInsufficientPowerShellVersion", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The member &apos;{0}&apos; in the module manifest is not valid: {1}. Verify that a valid value is specified for this field in the &apos;{2}&apos; file..
    /// </summary>
    internal static string ModuleManifestInvalidManifestMember {
        get {
            return ResourceManager.GetString("ModuleManifestInvalidManifestMember", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The &apos;{0}&apos; member is not valid in the module manifest file &apos;{2}&apos;: {1}.
    /// </summary>
    internal static string ModuleManifestInvalidValue {
        get {
            return ResourceManager.GetString("ModuleManifestInvalidValue", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The member &apos;ModuleVersion&apos; is not present in the module manifest. This member must exist and be assigned a version number of the form &apos;n.n.n.n&apos;. Add the missing member to the file &apos;{0}&apos;..
    /// </summary>
    internal static string ModuleManifestMissingModuleVersion {
        get {
            return ResourceManager.GetString("ModuleManifestMissingModuleVersion", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The module manifest member &apos;NestedModules&apos; cannot be used if the &apos;ModuleToProcess&apos; member is a binary module. Edit the module manifest file at &apos;{0}&apos;, and then try again..
    /// </summary>
    internal static string ModuleManifestNestedModulesCantGoWithModuleToProcess {
        get {
            return ResourceManager.GetString("ModuleManifestNestedModulesCantGoWithModuleToProcess", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The specified module &apos;{0}&apos; was not loaded because no valid module file was found in any module directory..
    /// </summary>
    internal static string ModuleNotFound {
        get {
            return ResourceManager.GetString("ModuleNotFound", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The specified module &apos;{0}&apos; was not found. Update the Name parameter to point to a valid path, and then try again. .
    /// </summary>
    internal static string ModuleNotFoundForGetModule {
        get {
            return ResourceManager.GetString("ModuleNotFoundForGetModule", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot load the module &apos;{0}&apos; because the module nesting limit has been exceeded. Modules can only be nested to {1} levels. Evaluate and change the order in which you are loading modules to prevent exceeding the nesting limit, and then try running your script again..
    /// </summary>
    internal static string ModuleTooDeeplyNested {
        get {
            return ResourceManager.GetString("ModuleTooDeeplyNested", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Script module or binary module file associated with this manifest.
    /// </summary>
    internal static string ModuleToProcess {
        get {
            return ResourceManager.GetString("ModuleToProcess", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The module manifest member &apos;ModuleToProcess&apos; has been deprecated. Use the &apos;RootModule&apos; member instead..
    /// </summary>
    internal static string ModuleToProcessFieldDeprecated {
        get {
            return ResourceManager.GetString("ModuleToProcessFieldDeprecated", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Version number of this module..
    /// </summary>
    internal static string ModuleVersion {
        get {
            return ResourceManager.GetString("ModuleVersion", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Version specified in ModuleVersion key is equal to version folder name..
    /// </summary>
    internal static string ModuleVersionEqualsToVersionFolder {
        get {
            return ResourceManager.GetString("ModuleVersionEqualsToVersionFolder", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The specified module &apos;{0}&apos; with version &apos;{1}&apos; was not loaded because no valid module file was found in any module directory..
    /// </summary>
    internal static string ModuleWithVersionNotFound {
        get {
            return ResourceManager.GetString("ModuleWithVersionNotFound", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Modules to import as nested modules of the module specified in RootModule/ModuleToProcess.
    /// </summary>
    internal static string NestedModules {
        get {
            return ResourceManager.GetString("NestedModules", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to No modules were removed. Verify that the specification of modules to remove is correct and those modules exist in the runspace..
    /// </summary>
    internal static string NoModulesRemoved {
        get {
            return ResourceManager.GetString("NoModulesRemoved", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Populating RepositorySourceLocation property for module {0}..
    /// </summary>
    internal static string PopulatingRepositorySourceLocation {
        get {
            return ResourceManager.GetString("PopulatingRepositorySourceLocation", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Name of the Windows PowerShell host required by this module.
    /// </summary>
    internal static string PowerShellHostName {
        get {
            return ResourceManager.GetString("PowerShellHostName", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Minimum version of the Windows PowerShell host required by this module.
    /// </summary>
    internal static string PowerShellHostVersion {
        get {
            return ResourceManager.GetString("PowerShellHostVersion", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Minimum version of the Windows PowerShell engine required by this module.
    /// </summary>
    internal static string PowerShellVersion {
        get {
            return ResourceManager.GetString("PowerShellVersion", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Private data to pass to the module specified in RootModule/ModuleToProcess. This may also contain a PSData hashtable with additional module metadata used by PowerShell..
    /// </summary>
    internal static string PrivateData {
        get {
            return ResourceManager.GetString("PrivateData", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The PrivateData parameter value must be a hash table to create the module manifest with the following parameter values Tags, ProjectUri, LicenseUri, IconUri or ReleaseNotes.  Either remove the Tags, ProjectUri, LicenseUri, IconUri, or ReleaseNotes parameter values or wrap the contents of PrivateData in a hashtable..
    /// </summary>
    internal static string PrivateDataValueTypeShouldBeHashTableError {
        get {
            return ResourceManager.GetString("PrivateDataValueTypeShouldBeHashTableError", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The PrivateData should be defined as a hashtable, but this module manifest defines it as an object. Please consider wrapping the contents of PrivateData in a hashtable. This will enable you to add the Tags, ProjectUri, LicenseUri, IconUri, and ReleaseNotes properties to the module manifest at a later time..
    /// </summary>
    internal static string PrivateDataValueTypeShouldBeHashTableWarning {
        get {
            return ResourceManager.GetString("PrivateDataValueTypeShouldBeHashTableWarning", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Processor architecture (None, X86, Amd64) required by this module.
    /// </summary>
    internal static string ProcessorArchitecture {
        get {
            return ResourceManager.GetString("ProcessorArchitecture", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to A URL to the main website for this project..
    /// </summary>
    internal static string ProjectUri {
        get {
            return ResourceManager.GetString("ProjectUri", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to PSData data to pass to the Publish-Module cmdlet.
    /// </summary>
    internal static string PSData {
        get {
            return ResourceManager.GetString("PSData", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The module {0} cannot be imported over a CimSession.  Try using the PSSession parameter of the Import-Module cmdlet..
    /// </summary>
    internal static string PsModuleOverCimSessionError {
        get {
            return ResourceManager.GetString("PsModuleOverCimSessionError", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to ReleaseNotes of this module.
    /// </summary>
    internal static string ReleaseNotes {
        get {
            return ResourceManager.GetString("ReleaseNotes", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Failed to generate proxies for remote module &apos;{0}&apos;.  {{0}}.
    /// </summary>
    internal static string RemoteDiscoveryFailedToGenerateProxyForRemoteModule {
        get {
            return ResourceManager.GetString("RemoteDiscoveryFailedToGenerateProxyForRemoteModule", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Failed to process the remote module {0}.  {1}.
    /// </summary>
    internal static string RemoteDiscoveryFailedToProcessRemoteModule {
        get {
            return ResourceManager.GetString("RemoteDiscoveryFailedToProcessRemoteModule", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Failed to receive module data from the remote CimSession.  {0}.
    /// </summary>
    internal static string RemoteDiscoveryFailureFromDiscoveryProvider {
        get {
            return ResourceManager.GetString("RemoteDiscoveryFailureFromDiscoveryProvider", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to A CIM provider for module discovery was not found on the CIM server.  {0}.
    /// </summary>
    internal static string RemoteDiscoveryProviderNotFound {
        get {
            return ResourceManager.GetString("RemoteDiscoveryProviderNotFound", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Failure from remote command: {0}: {{0}}.
    /// </summary>
    internal static string RemoteDiscoveryRemotePsrpCommandFailed {
        get {
            return ResourceManager.GetString("RemoteDiscoveryRemotePsrpCommandFailed", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Running the Get-Module cmdlet against a remote computer can only be done for module names that do not include a path. Name parameter has this element &apos;{0}&apos; which resolves to a path. Update the Name parameter to not have path elements, and then try again..
    /// </summary>
    internal static string RemoteDiscoveryWorksOnlyForUnQualifiedNames {
        get {
            return ResourceManager.GetString("RemoteDiscoveryWorksOnlyForUnQualifiedNames", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Running the Get-Module cmdlet against a remote computer can only list available modules. Add the ListAvailable parameter to your command, and then try again..
    /// </summary>
    internal static string RemoteDiscoveryWorksOnlyInListAvailableMode {
        get {
            return ResourceManager.GetString("RemoteDiscoveryWorksOnlyInListAvailableMode", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Removing the imported &quot;{0}&quot; alias..
    /// </summary>
    internal static string RemovingImportedAlias {
        get {
            return ResourceManager.GetString("RemovingImportedAlias", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Removing the imported &quot;{0}&quot; function..
    /// </summary>
    internal static string RemovingImportedFunction {
        get {
            return ResourceManager.GetString("RemovingImportedFunction", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Removing the imported &quot;{0}&quot; variable..
    /// </summary>
    internal static string RemovingImportedVariable {
        get {
            return ResourceManager.GetString("RemovingImportedVariable", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Assemblies that must be loaded prior to importing this module.
    /// </summary>
    internal static string RequiredAssemblies {
        get {
            return ResourceManager.GetString("RequiredAssemblies", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The &apos;ModuleName&apos; member does not exist in the hashtable that describes this module..
    /// </summary>
    internal static string RequiredModuleMissingModuleName {
        get {
            return ResourceManager.GetString("RequiredModuleMissingModuleName", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The &apos;ModuleVersion&apos;, &apos;MaximumVersion&apos; and &apos;RequiredVersion&apos; members do not exist in the hashtable that describes this module. One of these three members must exist, and be assigned a version number in the format &apos;n.n.n.n&apos;..
    /// </summary>
    internal static string RequiredModuleMissingModuleVersion {
        get {
            return ResourceManager.GetString("RequiredModuleMissingModuleVersion", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The required module &apos;{0}&apos; was not loaded because no valid module file was found in any module directory..
    /// </summary>
    internal static string RequiredModuleNotFound {
        get {
            return ResourceManager.GetString("RequiredModuleNotFound", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The required module &apos;{0}&apos; with GUID &apos;{1}&apos; and version &apos;{2}&apos; was not loaded because no valid module file was found in any module directory..
    /// </summary>
    internal static string RequiredModuleNotFoundWrongGuidVersion {
        get {
            return ResourceManager.GetString("RequiredModuleNotFoundWrongGuidVersion", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The required module &apos;{1}&apos; is not loaded. Load the module or remove the module from &apos;RequiredModules&apos; in the file &apos;{0}&apos;..
    /// </summary>
    internal static string RequiredModuleNotLoaded {
        get {
            return ResourceManager.GetString("RequiredModuleNotLoaded", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The required module &apos;{1}&apos; with GUID &apos;{2}&apos; is not loaded. Load the module or remove the module from &apos;RequiredModules&apos; in the file &apos;{0}&apos;..
    /// </summary>
    internal static string RequiredModuleNotLoadedWrongGuid {
        get {
            return ResourceManager.GetString("RequiredModuleNotLoadedWrongGuid", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The required module &apos;{1}&apos; with MaximumVersion &apos;{2}&apos; is not loaded. Load the module or remove the module from &apos;RequiredModules&apos; in the file &apos;{0}&apos;..
    /// </summary>
    internal static string RequiredModuleNotLoadedWrongMaximumVersion {
        get {
            return ResourceManager.GetString("RequiredModuleNotLoadedWrongMaximumVersion", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The required module &apos;{1}&apos; with MinimumVersion &apos;{2}&apos; and MaximumVersion &apos;{3}&apos; is not loaded. Load the module or remove the module from &apos;RequiredModules&apos; in the file &apos;{0}&apos;..
    /// </summary>
    internal static string RequiredModuleNotLoadedWrongMinimumVersionAndMaximumVersion {
        get {
            return ResourceManager.GetString("RequiredModuleNotLoadedWrongMinimumVersionAndMaximumVersion", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The required module &apos;{1}&apos; with version &apos;{2}&apos; is not loaded. Load the module or remove the module from &apos;RequiredModules&apos; in the file &apos;{0}&apos;..
    /// </summary>
    internal static string RequiredModuleNotLoadedWrongVersion {
        get {
            return ResourceManager.GetString("RequiredModuleNotLoadedWrongVersion", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Modules that must be imported into the global environment prior to importing this module.
    /// </summary>
    internal static string RequiredModules {
        get {
            return ResourceManager.GetString("RequiredModules", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The required module &apos;{0}&apos; is not loaded. The module &apos;{0}&apos; has a requiredModule &apos;{1}&apos; in its module manifest &apos;{2}&apos; that points to a cyclic dependency..
    /// </summary>
    internal static string RequiredModulesCyclicDependency {
        get {
            return ResourceManager.GetString("RequiredModulesCyclicDependency", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Script module or binary module file associated with this manifest..
    /// </summary>
    internal static string RootModule {
        get {
            return ResourceManager.GetString("RootModule", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Analyzing {0}..
    /// </summary>
    internal static string ScriptAnalysisModule {
        get {
            return ResourceManager.GetString("ScriptAnalysisModule", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Preparing modules for first use..
    /// </summary>
    internal static string ScriptAnalysisPreparing {
        get {
            return ResourceManager.GetString("ScriptAnalysisPreparing", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The specified script file &apos;{0}&apos; could not be processed because the file was not found. Verify that you have provided the correct path name for the script, and then try again..
    /// </summary>
    internal static string ScriptsFileNotFound {
        get {
            return ResourceManager.GetString("ScriptsFileNotFound", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Script files (.ps1) that are run in the caller&apos;s environment prior to importing this module..
    /// </summary>
    internal static string ScriptsToProcess {
        get {
            return ResourceManager.GetString("ScriptsToProcess", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The file &apos;{0}&apos; is not allowed because it does not have the extension &apos;.ps1&apos;..
    /// </summary>
    internal static string ScriptsToProcessIncorrectExtension {
        get {
            return ResourceManager.GetString("ScriptsToProcessIncorrectExtension", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Searching UNC share {0}..
    /// </summary>
    internal static string SearchingUncShare {
        get {
            return ResourceManager.GetString("SearchingUncShare", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Skipping the Version folder {0} under Module {1} as it does not have a valid module manifest file..
    /// </summary>
    internal static string SkippingInvalidModuleVersionFolder {
        get {
            return ResourceManager.GetString("SkippingInvalidModuleVersionFolder", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Tags applied to this module. These help with module discovery in online galleries..
    /// </summary>
    internal static string Tags {
        get {
            return ResourceManager.GetString("Tags", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The specified type data file &apos;{0}&apos; could not be processed because the file was not found. Verify that you have provided the correct path name for the type data file, and then try again..
    /// </summary>
    internal static string TypesFileNotFound {
        get {
            return ResourceManager.GetString("TypesFileNotFound", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Type files (.ps1xml) to be loaded when importing this module.
    /// </summary>
    internal static string TypesToProcess {
        get {
            return ResourceManager.GetString("TypesToProcess", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The &apos;{0}&apos; member, which was imported from module &apos;{1}&apos;, cannot be removed for the following reason: {2}.
    /// </summary>
    internal static string UnableToRemoveModuleMember {
        get {
            return ResourceManager.GetString("UnableToRemoveModuleMember", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Variables to export from this module.
    /// </summary>
    internal static string VariablesToExport {
        get {
            return ResourceManager.GetString("VariablesToExport", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Wildcard characters are not allowed in members &apos;ModuleToProcess&apos;, &apos;RootModule&apos;, or &apos;NestedModule&apos; in the module manifest &apos;{0}&apos;..
    /// </summary>
    internal static string WildCardNotAllowedInModuleToProcessAndInNestedModules {
        get {
            return ResourceManager.GetString("WildCardNotAllowedInModuleToProcessAndInNestedModules", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Wildcard characters are not allowed in the member &apos;RequiredAssemblies&apos; in the module manifest &apos;{0}&apos;..
    /// </summary>
    internal static string WildCardNotAllowedInRequiredAssemblies {
        get {
            return ResourceManager.GetString("WildCardNotAllowedInRequiredAssemblies", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot load the workflow module &apos;{0}&apos;. Workflow is not supported in OneCore PowerShell..
    /// </summary>
    internal static string WorkflowModuleNotSupportedInOneCorePowerShell {
        get {
            return ResourceManager.GetString("WorkflowModuleNotSupportedInOneCorePowerShell", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Commands to export from this module as workflows.
    /// </summary>
    internal static string WorkflowsToExport {
        get {
            return ResourceManager.GetString("WorkflowsToExport", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot load the workflow. XAML-based workflows are not supported in the current language mode. Only script-based workflows are supported in this language mode..
    /// </summary>
    internal static string XamlWorkflowsNotSupported {
        get {
            return ResourceManager.GetString("XamlWorkflowsNotSupported", resourceCulture);
        }
    }
}
