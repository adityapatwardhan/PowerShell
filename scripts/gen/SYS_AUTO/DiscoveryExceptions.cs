//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;



/// <summary>
///   A strongly-typed resource class, for looking up localized strings, etc.
/// </summary>
// This class was auto-generated by the StronglyTypedResourceBuilder
// class via a tool like ResGen or Visual Studio.
// To add or remove a member, edit your .ResX file then rerun ResGen
// with the /str option, or rebuild your VS project.
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
internal class DiscoveryExceptions {
    
    private static global::System.Resources.ResourceManager resourceMan;
    
    private static global::System.Globalization.CultureInfo resourceCulture;
    
    [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
    internal DiscoveryExceptions() {
    }
    
    /// <summary>
    ///   Returns the cached ResourceManager instance used by this class.
    /// </summary>
    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    internal static global::System.Resources.ResourceManager ResourceManager {
        get {
            if (object.ReferenceEquals(resourceMan, null)) {
                global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DiscoveryExceptions", typeof(DiscoveryExceptions).GetTypeInfo().Assembly);
                resourceMan = temp;
            }
            return resourceMan;
        }
    }
    
    /// <summary>
    ///   Overrides the current thread's CurrentUICulture property for all
    ///   resource lookups using this strongly typed resource class.
    /// </summary>
    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    internal static global::System.Globalization.CultureInfo Culture {
        get {
            return resourceCulture;
        }
        set {
            resourceCulture = value;
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The alias &quot;{0}&quot; is declared multiple times..
    /// </summary>
    internal static string AliasDeclaredMultipleTimes {
        get {
            return ResourceManager.GetString("AliasDeclaredMultipleTimes", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot resolve alias &apos;{0}&apos; because it refers to term &apos;{1}&apos;, which is not recognized as a cmdlet, function, operable program, or script file. Verify the term and try again..
    /// </summary>
    internal static string AliasNotResolvedException {
        get {
            return ResourceManager.GetString("AliasNotResolvedException", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The argument &apos;{0}&apos; is not recognized as a cmdlet, possibly because it does not derive from the Cmdlet or PSCmdlet classes: {1}.
    /// </summary>
    internal static string CmdletDoesNotDeriveFromCmdletType {
        get {
            return ResourceManager.GetString("CmdletDoesNotDeriveFromCmdletType", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The cmdlet name &quot;{0}&quot; cannot be validated because it is not in the correct format. Cmdlet names must include a verb and a noun separated by a &quot;-&quot;, such as &quot;Get-Process&quot;..
    /// </summary>
    internal static string CmdletFormatInvalid {
        get {
            return ResourceManager.GetString("CmdletFormatInvalid", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Argument &apos;{0}&apos; is not recognized as a cmdlet: {1}.
    /// </summary>
    internal static string CmdletNotFoundException {
        get {
            return ResourceManager.GetString("CmdletNotFoundException", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The command could not be retrieved because the ArgumentList parameter can be specified only when retrieving a single cmdlet or script..
    /// </summary>
    internal static string CommandArgsOnlyForSingleCmdlet {
        get {
            return ResourceManager.GetString("CommandArgsOnlyForSingleCmdlet", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot retrieve an instance of CommandDiscovery..
    /// </summary>
    internal static string CommandDiscoveryMissing {
        get {
            return ResourceManager.GetString("CommandDiscoveryMissing", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Parameter &apos;{0}&apos; with value &apos;{1}&apos; cannot be processed because it is not a cmdlet and cannot be processed by the CommandProcessor..
    /// </summary>
    internal static string CommandNameNotCmdlet {
        get {
            return ResourceManager.GetString("CommandNameNotCmdlet", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The term &apos;{0}&apos; is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again..
    /// </summary>
    internal static string CommandNotFoundException {
        get {
            return ResourceManager.GetString("CommandNotFoundException", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to No matching commands include a parameter named &apos;{0}&apos;.  Check the spelling of the parameter name, and then try again..
    /// </summary>
    internal static string CommandParameterNotFound {
        get {
            return ResourceManager.GetString("CommandParameterNotFound", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Parameter could not be declared. Parameters can be declared only on fields and properties..
    /// </summary>
    internal static string CompiledCommandParameterMemberMustBeFieldOrProperty {
        get {
            return ResourceManager.GetString("CompiledCommandParameterMemberMustBeFieldOrProperty", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The &apos;{0}&apos; command was found in the module &apos;{1}&apos;, but the module could not be loaded. For more information, run &apos;Import-Module {1}&apos;..
    /// </summary>
    internal static string CouldNotAutoImportMatchingModule {
        get {
            return ResourceManager.GetString("CouldNotAutoImportMatchingModule", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The module &apos;{0}&apos; could not be loaded. For more information, run &apos;Import-Module {0}&apos;..
    /// </summary>
    internal static string CouldNotAutoImportModule {
        get {
            return ResourceManager.GetString("CouldNotAutoImportModule", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot dot-source this command because it was defined in a different language mode. To invoke this command without importing its contents, omit the &apos;.&apos; operator..
    /// </summary>
    internal static string DotSourceNotSupported {
        get {
            return ResourceManager.GetString("DotSourceNotSupported", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to An assembly named &apos;{0}&apos; already exists. Assemblies must have unique names..
    /// </summary>
    internal static string DuplicateAssemblyName {
        get {
            return ResourceManager.GetString("DuplicateAssemblyName", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to A cmdlet named &apos;{0}&apos; already exists. Cmdlets must have unique names..
    /// </summary>
    internal static string DuplicateCmdletName {
        get {
            return ResourceManager.GetString("DuplicateCmdletName", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to A cmdlet provider named &apos;{0}&apos; already exists. Cmdlet providers must have unique names..
    /// </summary>
    internal static string DuplicateCmdletProviderName {
        get {
            return ResourceManager.GetString("DuplicateCmdletProviderName", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to A script named &apos;{0}&apos; already exists. Scripts must have unique names..
    /// </summary>
    internal static string DuplicateScriptName {
        get {
            return ResourceManager.GetString("DuplicateScriptName", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to An ExecutionContext has not been set..
    /// </summary>
    internal static string ExecutionContextNotSet {
        get {
            return ResourceManager.GetString("ExecutionContextNotSet", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The ShowCommandInfo and Syntax parameters cannot be specified together..
    /// </summary>
    internal static string GetCommandShowCommandInfoParamError {
        get {
            return ResourceManager.GetString("GetCommandShowCommandInfoParamError", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot process the cmdlet. A cmdlet name must consist of a verb and noun pair separated by &apos;-&apos;..
    /// </summary>
    internal static string InvalidCmdletNameFormat {
        get {
            return ResourceManager.GetString("InvalidCmdletNameFormat", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The parameter &quot;{0}&quot; is declared in parameter-set &quot;{1}&quot; multiple times..
    /// </summary>
    internal static string ParameterDeclaredInParameterSetMultipleTimes {
        get {
            return ResourceManager.GetString("ParameterDeclaredInParameterSetMultipleTimes", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to {0} (Version {1}).
    /// </summary>
    internal static string PSSnapInNameVersion {
        get {
            return ResourceManager.GetString("PSSnapInNameVersion", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The script &apos;{0}&apos; cannot be run because it contains a &quot;#requires&quot; statement for running as Administrator. The current Windows PowerShell session is not running as Administrator. Start Windows PowerShell by  using the Run as Administrator option, and then try running the script again..
    /// </summary>
    internal static string RequiresElevation {
        get {
            return ResourceManager.GetString("RequiresElevation", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The script &apos;{0}&apos; cannot be run because it contained a &quot;#requires&quot; statement with a shell ID of {1} that is incompatible with the current shell. To run this script you must use the shell located at &apos;{2}&apos;..
    /// </summary>
    internal static string RequiresInterpreterNotCompatible {
        get {
            return ResourceManager.GetString("RequiresInterpreterNotCompatible", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The script &apos;{0}&apos; cannot be run because it contained a &quot;#requires&quot; statement with a shell ID of {1} that is incompatible with the current shell..
    /// </summary>
    internal static string RequiresInterpreterNotCompatibleNoPath {
        get {
            return ResourceManager.GetString("RequiresInterpreterNotCompatibleNoPath", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The script &apos;{0}&apos; cannot be run because the following modules that are specified by the &quot;#requires&quot; statements of the script are missing: {1}..
    /// </summary>
    internal static string RequiresMissingModules {
        get {
            return ResourceManager.GetString("RequiresMissingModules", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The script &apos;{0}&apos; cannot be run because the following snap-ins that are specified by the &quot;#requires&quot; statements of the script are missing: {1}..
    /// </summary>
    internal static string RequiresMissingPSSnapIns {
        get {
            return ResourceManager.GetString("RequiresMissingPSSnapIns", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The script &apos;{0}&apos; cannot be run because it contained a &quot;#requires&quot; statement for Windows PowerShell {1}. The version of Windows PowerShell that is required by the script does not match the currently running version of Windows PowerShell {2}..
    /// </summary>
    internal static string RequiresPSVersionNotCompatible {
        get {
            return ResourceManager.GetString("RequiresPSVersionNotCompatible", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to A #requires statement has specified only a shellID. #Requires statements must specify a required Windows PowerShell snap-in when running in Windows PowerShell..
    /// </summary>
    internal static string RequiresShellIDInvalidForSingleShell {
        get {
            return ResourceManager.GetString("RequiresShellIDInvalidForSingleShell", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The parameter name &quot;{0}&quot; is reserved for future use..
    /// </summary>
    internal static string ReservedParameterName {
        get {
            return ResourceManager.GetString("ReservedParameterName", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot process the #requires statement because it is not in the correct format.
    ///The #requires statement must be in one of the following formats:
    /// &quot;#requires -shellid &lt;shellID&gt;&quot;
    /// &quot;#requires -version &lt;major.minor&gt;&quot;
    /// &quot;#requires -pssnapin &lt;psSnapInName&gt; [-version &lt;major.minor&gt;]&quot;
    /// &quot;#requires -modules &lt;ModuleSpecification&gt;&quot;
    /// &quot;#requires -runasadministrator&quot;.
    /// </summary>
    internal static string ScriptRequiresInvalidFormat {
        get {
            return ResourceManager.GetString("ScriptRequiresInvalidFormat", resourceCulture);
        }
    }
}
