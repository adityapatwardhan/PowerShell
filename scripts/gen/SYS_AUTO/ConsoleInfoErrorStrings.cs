//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;



/// <summary>
///   A strongly-typed resource class, for looking up localized strings, etc.
/// </summary>
// This class was auto-generated by the StronglyTypedResourceBuilder
// class via a tool like ResGen or Visual Studio.
// To add or remove a member, edit your .ResX file then rerun ResGen
// with the /str option, or rebuild your VS project.
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
internal class ConsoleInfoErrorStrings {
    
    private static global::System.Resources.ResourceManager resourceMan;
    
    private static global::System.Globalization.CultureInfo resourceCulture;
    
    [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
    internal ConsoleInfoErrorStrings() {
    }
    
    /// <summary>
    ///   Returns the cached ResourceManager instance used by this class.
    /// </summary>
    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    internal static global::System.Resources.ResourceManager ResourceManager {
        get {
            if (object.ReferenceEquals(resourceMan, null)) {
                global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ConsoleInfoErrorStrings", typeof(ConsoleInfoErrorStrings).GetTypeInfo().Assembly);
                resourceMan = temp;
            }
            return resourceMan;
        }
    }
    
    /// <summary>
    ///   Overrides the current thread's CurrentUICulture property for all
    ///   resource lookups using this strongly typed resource class.
    /// </summary>
    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    internal static global::System.Globalization.CultureInfo Culture {
        get {
            return resourceCulture;
        }
        set {
            resourceCulture = value;
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Windows PowerShell {0} is not supported in the current console. Windows PowerShell {1} is supported in the current console..
    /// </summary>
    internal static string AddPSSnapInBadMonadVersion {
        get {
            return ResourceManager.GetString("AddPSSnapInBadMonadVersion", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The console file name extension is not valid. A console file name extension must be psc1..
    /// </summary>
    internal static string BadConsoleExtension {
        get {
            return ResourceManager.GetString("BadConsoleExtension", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Required element &quot;ConsoleSchemaVersion&quot; in {0} is missing or incorrect..
    /// </summary>
    internal static string BadConsoleVersion {
        get {
            return ResourceManager.GetString("BadConsoleVersion", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Incorrect Windows PowerShell version {0}. Windows PowerShell version {1} is supported on this computer..
    /// </summary>
    internal static string BadMonadVersion {
        get {
            return ResourceManager.GetString("BadMonadVersion", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Unknown element {0} found. &quot;{1}&quot; should have &quot;{2}&quot; and &quot;{3}&quot; elements only..
    /// </summary>
    internal static string BadXMLElementFound {
        get {
            return ResourceManager.GetString("BadXMLElementFound", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The console file is not valid. Multiple entries were found for the element PSConsoleFile. Only one entry is supported for this version..
    /// </summary>
    internal static string BadXMLFormat {
        get {
            return ResourceManager.GetString("BadXMLFormat", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to This is a system Windows PowerShell snap-in that is loaded by Windows PowerShell..
    /// </summary>
    internal static string CannotLoadDefault {
        get {
            return ResourceManager.GetString("CannotLoadDefault", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to An error occurred while attempting to load the system Windows PowerShell snap-ins. Please contact Microsoft Customer Support Services..
    /// </summary>
    internal static string CannotLoadDefaults {
        get {
            return ResourceManager.GetString("CannotLoadDefaults", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot remove the Windows PowerShell snap-in {0} because it is a system snap-in. Verify the name of the snap-in that you want to remove, and then try again..
    /// </summary>
    internal static string CannotRemoveDefault {
        get {
            return ResourceManager.GetString("CannotRemoveDefault", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot remove the Windows PowerShell snap-in {0} because it is not loaded. Verify the name of the snap-in that you want to remove, and then try again..
    /// </summary>
    internal static string CannotRemovePSSnapIn {
        get {
            return ResourceManager.GetString("CannotRemovePSSnapIn", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The cmdlet is not supported by the custom shell..
    /// </summary>
    internal static string CmdletNotAvailable {
        get {
            return ResourceManager.GetString("CmdletNotAvailable", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot save the file because the file name format is not valid. Specify a file name using the command: export-console -path..
    /// </summary>
    internal static string ConsoleCannotbeConvertedToString {
        get {
            return ResourceManager.GetString("ConsoleCannotbeConvertedToString", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot export to a console because no console is loaded or no name is specified..
    /// </summary>
    internal static string ConsoleFileNameNotResolved {
        get {
            return ResourceManager.GetString("ConsoleFileNameNotResolved", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot export to this file because file {0} is read-only. Change the read-only attribute of the file to read-write, or export to a different file..
    /// </summary>
    internal static string ConsoleFileReadOnly {
        get {
            return ResourceManager.GetString("ConsoleFileReadOnly", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot save the console file because wildcard characters were used. Specify a console file without wildcard characters..
    /// </summary>
    internal static string ConsoleFileWildCardsNotSupported {
        get {
            return ResourceManager.GetString("ConsoleFileWildCardsNotSupported", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The following errors occurred when loading console {0}: {1}.
    /// </summary>
    internal static string ConsoleLoadFailure {
        get {
            return ResourceManager.GetString("ConsoleLoadFailure", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot set the ConsoleFileName variable to {0}. File {0} was saved..
    /// </summary>
    internal static string ConsoleVariableCannotBeSet {
        get {
            return ResourceManager.GetString("ConsoleVariableCannotBeSet", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The Save operation failed. Cannot remove the file {0}..
    /// </summary>
    internal static string ExportConsoleCannotDeleteFile {
        get {
            return ResourceManager.GetString("ExportConsoleCannotDeleteFile", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to File {0} already exists and {1} was specified..
    /// </summary>
    internal static string FileExistsNoClobber {
        get {
            return ResourceManager.GetString("FileExistsNoClobber", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cmdlet {0}.
    /// </summary>
    internal static string FileNameCaptionForExportConsole {
        get {
            return ResourceManager.GetString("FileNameCaptionForExportConsole", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot save the specified file. The Save operation was canceled..
    /// </summary>
    internal static string FileNameNotResolved {
        get {
            return ResourceManager.GetString("FileNameNotResolved", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Supply values for the following parameters:.
    /// </summary>
    internal static string FileNamePromptMessage {
        get {
            return ResourceManager.GetString("FileNamePromptMessage", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The console file is not valid because the Windows PowerShell snap-in name is missing..
    /// </summary>
    internal static string IDNotFound {
        get {
            return ResourceManager.GetString("IDNotFound", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Required element &quot;PSConsoleFile&quot; in {0} is missing or incorrect..
    /// </summary>
    internal static string MonadConsoleNotFound {
        get {
            return ResourceManager.GetString("MonadConsoleNotFound", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Required element &quot;PSVersion&quot; in {0} is missing or incorrect..
    /// </summary>
    internal static string MonadVersionNotFound {
        get {
            return ResourceManager.GetString("MonadVersionNotFound", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The console file is not valid. Only one occurrence of the element &quot;{0}&quot; is allowed..
    /// </summary>
    internal static string MultipleMshSnapinsElementNotSupported {
        get {
            return ResourceManager.GetString("MultipleMshSnapinsElementNotSupported", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The path {0} is not an absolute path..
    /// </summary>
    internal static string PathNotAbsolute {
        get {
            return ResourceManager.GetString("PathNotAbsolute", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot export a console file because no console file has been specified. Do you want to continue with the export operation?.
    /// </summary>
    internal static string PromptForExportConsole {
        get {
            return ResourceManager.GetString("PromptForExportConsole", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to You can only save a file when you are working in a file provider. The current provider &apos;{0}&apos; is not a file provider..
    /// </summary>
    internal static string ProviderNotSupported {
        get {
            return ResourceManager.GetString("ProviderNotSupported", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot add Windows PowerShell snap-in {0} because it is already added. Verify the name of the snap-in, and then try again..
    /// </summary>
    internal static string PSSnapInAlreadyExists {
        get {
            return ResourceManager.GetString("PSSnapInAlreadyExists", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The Windows PowerShell snap-in module {0} does not have the required Windows PowerShell snap-in strong name {1}..
    /// </summary>
    internal static string PSSnapInAssemblyNameMismatch {
        get {
            return ResourceManager.GetString("PSSnapInAssemblyNameMismatch", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot find any Windows PowerShell snap-in information for {0}..
    /// </summary>
    internal static string PSSnapInDoesNotExist {
        get {
            return ResourceManager.GetString("PSSnapInDoesNotExist", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The cmdlet &apos;{0}&apos; should not occur more than once in Windows PowerShell snap-in &apos;{1}&apos;..
    /// </summary>
    internal static string PSSnapInDuplicateCmdlets {
        get {
            return ResourceManager.GetString("PSSnapInDuplicateCmdlets", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Windows PowerShell provider &apos;{0}&apos; should not occur more than once in Windows PowerShell snap-in &apos;{1}&apos;..
    /// </summary>
    internal static string PSSnapInDuplicateProviders {
        get {
            return ResourceManager.GetString("PSSnapInDuplicateProviders", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot load Windows PowerShell snap-in {0} because of the following error: {1}.
    /// </summary>
    internal static string PSSnapInLoadFailure {
        get {
            return ResourceManager.GetString("PSSnapInLoadFailure", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Windows PowerShell snap-in &quot;{0}&quot; loaded with the following warnings: {1}.
    /// </summary>
    internal static string PSSnapInLoadWarning {
        get {
            return ResourceManager.GetString("PSSnapInLoadWarning", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The console file is not valid because the element {0} is not valid..
    /// </summary>
    internal static string PSSnapInNotFound {
        get {
            return ResourceManager.GetString("PSSnapInNotFound", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot load the Windows PowerShell snap-in because an error occurred while reading the registry information for the snap-in..
    /// </summary>
    internal static string PSSnapInReadError {
        get {
            return ResourceManager.GetString("PSSnapInReadError", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Attempting to save a console file with no name. Use Export-Console with the Path parameter to save the console file..
    /// </summary>
    internal static string SaveDefaultError {
        get {
            return ResourceManager.GetString("SaveDefaultError", resourceCulture);
        }
    }
}
