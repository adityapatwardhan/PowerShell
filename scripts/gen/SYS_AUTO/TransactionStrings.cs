//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;



/// <summary>
///   A strongly-typed resource class, for looking up localized strings, etc.
/// </summary>
// This class was auto-generated by the StronglyTypedResourceBuilder
// class via a tool like ResGen or Visual Studio.
// To add or remove a member, edit your .ResX file then rerun ResGen
// with the /str option, or rebuild your VS project.
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
internal class TransactionStrings {
    
    private static global::System.Resources.ResourceManager resourceMan;
    
    private static global::System.Globalization.CultureInfo resourceCulture;
    
    [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
    internal TransactionStrings() {
    }
    
    /// <summary>
    ///   Returns the cached ResourceManager instance used by this class.
    /// </summary>
    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    internal static global::System.Resources.ResourceManager ResourceManager {
        get {
            if (object.ReferenceEquals(resourceMan, null)) {
                global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("TransactionStrings", typeof(TransactionStrings).GetTypeInfo().Assembly);
                resourceMan = temp;
            }
            return resourceMan;
        }
    }
    
    /// <summary>
    ///   Overrides the current thread's CurrentUICulture property for all
    ///   resource lookups using this strongly typed resource class.
    /// </summary>
    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    internal static global::System.Globalization.CultureInfo Culture {
        get {
            return resourceCulture;
        }
        set {
            resourceCulture = value;
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The base transaction cannot be set after other transactions have been created..
    /// </summary>
    internal static string BaseTransactionMustBeFirst {
        get {
            return ResourceManager.GetString("BaseTransactionMustBeFirst", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The base transaction is not active..
    /// </summary>
    internal static string BaseTransactionNotActive {
        get {
            return ResourceManager.GetString("BaseTransactionNotActive", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to The base transaction has not been set..
    /// </summary>
    internal static string BaseTransactionNotSet {
        get {
            return ResourceManager.GetString("BaseTransactionNotSet", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to This cmdlet requires a transaction. Run the command again with the -UseTransaction parameter..
    /// </summary>
    internal static string CmdletRequiresUseTx {
        get {
            return ResourceManager.GetString("CmdletRequiresUseTx", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot commit transaction. The transaction has already been committed..
    /// </summary>
    internal static string CommittedTransactionForCommit {
        get {
            return ResourceManager.GetString("CommittedTransactionForCommit", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot roll back transaction. The transaction has already been committed..
    /// </summary>
    internal static string CommittedTransactionForRollback {
        get {
            return ResourceManager.GetString("CommittedTransactionForRollback", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot use transaction. No transaction is active..
    /// </summary>
    internal static string NoTransactionActive {
        get {
            return ResourceManager.GetString("NoTransactionActive", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot commit transaction. No transaction is active..
    /// </summary>
    internal static string NoTransactionActiveForCommit {
        get {
            return ResourceManager.GetString("NoTransactionActiveForCommit", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot roll back the transaction, because there is no active transaction..
    /// </summary>
    internal static string NoTransactionActiveForRollback {
        get {
            return ResourceManager.GetString("NoTransactionActiveForRollback", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to This cmdlet requires an active transaction. The current transaction has already been committed or rolled back..
    /// </summary>
    internal static string NoTransactionAvailable {
        get {
            return ResourceManager.GetString("NoTransactionAvailable", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot set active transaction. No transaction has been created..
    /// </summary>
    internal static string NoTransactionForActivation {
        get {
            return ResourceManager.GetString("NoTransactionForActivation", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot set active transaction. The active transaction has been rolled back or has timed out..
    /// </summary>
    internal static string NoTransactionForActivationBecauseRollback {
        get {
            return ResourceManager.GetString("NoTransactionForActivationBecauseRollback", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot use transaction. No transaction has been started..
    /// </summary>
    internal static string NoTransactionStarted {
        get {
            return ResourceManager.GetString("NoTransactionStarted", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot use transaction. The transaction has been committed..
    /// </summary>
    internal static string NoTransactionStartedFromCommit {
        get {
            return ResourceManager.GetString("NoTransactionStartedFromCommit", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot use transaction. The transaction has been rolled back or has timed out..
    /// </summary>
    internal static string NoTransactionStartedFromRollback {
        get {
            return ResourceManager.GetString("NoTransactionStartedFromRollback", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot commit transaction. The transaction has been rolled back or has timed out..
    /// </summary>
    internal static string TransactionRolledBackForCommit {
        get {
            return ResourceManager.GetString("TransactionRolledBackForCommit", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot roll back transaction. The transaction has already been rolled back or has timed out..
    /// </summary>
    internal static string TransactionRolledBackForRollback {
        get {
            return ResourceManager.GetString("TransactionRolledBackForRollback", resourceCulture);
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Cannot use transaction. The transaction has timed out..
    /// </summary>
    internal static string TransactionTimedOut {
        get {
            return ResourceManager.GetString("TransactionTimedOut", resourceCulture);
        }
    }
}
