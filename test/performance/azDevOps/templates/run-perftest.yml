parameters:
  imageName: 'vs2017-win2016'
  jobName: 'perf_test'
  displayName: 'Windows Server 2016'

jobs:
- job: ${{ parameters.jobName }}
  pool:
    vmImage: ${{ parameters.imageName }}
  displayName: ${{ parameters.displayName }}

  steps:

  - pwsh: |
      git clone https://github.com/adityapatwardhan/PSSnowball "$(Build.SourcesDirectory)/PSSnowball"
    displayName: Git clone PSSnowball

  - pwsh: |
      $pwshPath = if ($PSBuildId) {
          test/performance/azDevOps/get-latestpsbuild.ps1 -Destination $(Build.ArtifactStagingDirectory) -Token $(BuildAccessToken) -BuildId $(PSBuildId)
      } else {
          test/performance/azDevOps/get-latestpsbuild.ps1 -Destination $(Build.ArtifactStagingDirectory) -Token $(BuildAccessToken)
      }

      $vstsCommandString = "vso[task.setvariable variable=PwshPath]$pwshPath"
      Write-Host "sending " + $vstsCommandString
      Write-Host "##$vstsCommandString"

    displayName: Install PowerShell build

  - pwsh: |
      Import-Module "$(Build.SourcesDirectory)/PSSnowball/PSSnowball" -force
      $results = @()

      # Start run
      Start-PSSnowballRun -Verbose -InstrumentationKey '$(PerfAppInsightsKey)' -PwshPath '$(PwshPath)'

      # Get-Help test
      $results += Invoke-PSSnowballTest -TestName "GetHelpNonExistent" -ScriptBlock { $ProgressPreference = 'silentlycontinue'; Get-Help DoesNotExist -ErrorAction SilentlyContinue} -Verbose

      # Get-Command test
      $results += Invoke-PSSnowballTest -TestName "GetCommand" -ScriptBlock { Get-Command } -Verbose

      # Get-Module ListAvailable test
      try {
        $originalPSModulePath = $env:PSModulePath
        $results += Invoke-PSSnowballTest -TestName "GetModuleListAvailable" -ScriptBlock { Get-Module -ListAvailable } -Verbose
      }
      finally {
        $env:PSModulePath = $originalPSModulePath
      }

      # Stop run
      Stop-PSSnowballRun
    displayName: Execute Tests
